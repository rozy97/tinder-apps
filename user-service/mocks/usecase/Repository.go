// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rozy97/tinder-apps/user-service/model"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CountUserByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) CountUserByEmail(ctx context.Context, email string) (uint, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for CountUserByEmail")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CountUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountUserByEmail'
type Repository_CountUserByEmail_Call struct {
	*mock.Call
}

// CountUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Repository_Expecter) CountUserByEmail(ctx interface{}, email interface{}) *Repository_CountUserByEmail_Call {
	return &Repository_CountUserByEmail_Call{Call: _e.mock.On("CountUserByEmail", ctx, email)}
}

func (_c *Repository_CountUserByEmail_Call) Run(run func(ctx context.Context, email string)) *Repository_CountUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_CountUserByEmail_Call) Return(total uint, err error) *Repository_CountUserByEmail_Call {
	_c.Call.Return(total, err)
	return _c
}

func (_c *Repository_CountUserByEmail_Call) RunAndReturn(run func(context.Context, string) (uint, error)) *Repository_CountUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) GetUserByEmail(ctx context.Context, email string) (model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type Repository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Repository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *Repository_GetUserByEmail_Call {
	return &Repository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *Repository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *Repository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetUserByEmail_Call) Return(user model.User, err error) *Repository_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *Repository_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (model.User, error)) *Repository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// InsertUser provides a mock function with given fields: ctx, user
func (_m *Repository) InsertUser(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for InsertUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_InsertUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertUser'
type Repository_InsertUser_Call struct {
	*mock.Call
}

// InsertUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.User
func (_e *Repository_Expecter) InsertUser(ctx interface{}, user interface{}) *Repository_InsertUser_Call {
	return &Repository_InsertUser_Call{Call: _e.mock.On("InsertUser", ctx, user)}
}

func (_c *Repository_InsertUser_Call) Run(run func(ctx context.Context, user model.User)) *Repository_InsertUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *Repository_InsertUser_Call) Return(_a0 error) *Repository_InsertUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_InsertUser_Call) RunAndReturn(run func(context.Context, model.User) error) *Repository_InsertUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserByID provides a mock function with given fields: ctx, user
func (_m *Repository) UpdateUserByID(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserByID'
type Repository_UpdateUserByID_Call struct {
	*mock.Call
}

// UpdateUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.User
func (_e *Repository_Expecter) UpdateUserByID(ctx interface{}, user interface{}) *Repository_UpdateUserByID_Call {
	return &Repository_UpdateUserByID_Call{Call: _e.mock.On("UpdateUserByID", ctx, user)}
}

func (_c *Repository_UpdateUserByID_Call) Run(run func(ctx context.Context, user model.User)) *Repository_UpdateUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *Repository_UpdateUserByID_Call) Return(_a0 error) *Repository_UpdateUserByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdateUserByID_Call) RunAndReturn(run func(context.Context, model.User) error) *Repository_UpdateUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
