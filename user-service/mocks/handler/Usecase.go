// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/rozy97/tinder-apps/user-service/request"

	response "github.com/rozy97/tinder-apps/user-service/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

type Usecase_Expecter struct {
	mock *mock.Mock
}

func (_m *Usecase) EXPECT() *Usecase_Expecter {
	return &Usecase_Expecter{mock: &_m.Mock}
}

// Activation provides a mock function with given fields: ctx, userID, profile
func (_m *Usecase) Activation(ctx context.Context, userID uint64, profile request.Profile) error {
	ret := _m.Called(ctx, userID, profile)

	if len(ret) == 0 {
		panic("no return value specified for Activation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, request.Profile) error); ok {
		r0 = rf(ctx, userID, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_Activation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activation'
type Usecase_Activation_Call struct {
	*mock.Call
}

// Activation is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - profile request.Profile
func (_e *Usecase_Expecter) Activation(ctx interface{}, userID interface{}, profile interface{}) *Usecase_Activation_Call {
	return &Usecase_Activation_Call{Call: _e.mock.On("Activation", ctx, userID, profile)}
}

func (_c *Usecase_Activation_Call) Run(run func(ctx context.Context, userID uint64, profile request.Profile)) *Usecase_Activation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(request.Profile))
	})
	return _c
}

func (_c *Usecase_Activation_Call) Return(_a0 error) *Usecase_Activation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_Activation_Call) RunAndReturn(run func(context.Context, uint64, request.Profile) error) *Usecase_Activation_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, req
func (_m *Usecase) Login(ctx context.Context, req request.Login) (*response.Login, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *response.Login
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Login) (*response.Login, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Login) *response.Login); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Login)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Login) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Usecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req request.Login
func (_e *Usecase_Expecter) Login(ctx interface{}, req interface{}) *Usecase_Login_Call {
	return &Usecase_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *Usecase_Login_Call) Run(run func(ctx context.Context, req request.Login)) *Usecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.Login))
	})
	return _c
}

func (_c *Usecase_Login_Call) Return(_a0 *response.Login, _a1 error) *Usecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_Login_Call) RunAndReturn(run func(context.Context, request.Login) (*response.Login, error)) *Usecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, req
func (_m *Usecase) Register(ctx context.Context, req request.Register) (*response.Register, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *response.Register
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Register) (*response.Register, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Register) *response.Register); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Register)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Register) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Usecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req request.Register
func (_e *Usecase_Expecter) Register(ctx interface{}, req interface{}) *Usecase_Register_Call {
	return &Usecase_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *Usecase_Register_Call) Run(run func(ctx context.Context, req request.Register)) *Usecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.Register))
	})
	return _c
}

func (_c *Usecase_Register_Call) Return(_a0 *response.Register, _a1 error) *Usecase_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_Register_Call) RunAndReturn(run func(context.Context, request.Register) (*response.Register, error)) *Usecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
